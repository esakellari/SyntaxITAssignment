import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class MoviesSuggestion {

  public int[] suggest(int flightDuration, int[] moviesDuration) {

    int totalDuration = flightDuration - 30;

    HashMap<Integer, Pairs> contenders = new HashMap<>();

    int pairIndex = 0;

    //first create a set of 'pairs' out of the movies
    //tha have the desired duration
    for (int i = 0; i < moviesDuration.length; i++) {
      for (int j = 0; j < moviesDuration.length; j++) {
        if (moviesDuration[i] + moviesDuration[j] <= totalDuration) {
          contenders.put(pairIndex++, new Pairs(i, j));
        }
      }
    }

    HashMap<Integer, Integer> pairsDurations = new HashMap<>();
    contenders.forEach((index, pairs) -> {
      //Put all the pairs' durations in a map, with their indexes
      //in order to find the max.
      pairsDurations.put(index,
        moviesDuration[pairs.getMovie1()] + moviesDuration[pairs.getMovie2()]);
    });

    //sort from max to min
    HashMap<Integer, Integer> sortedPairs = sortByValue(pairsDurations);
    Integer maxIndex =
      (Integer) Arrays.asList(sortedPairs.keySet().toArray()).get(sortedPairs.keySet().size() - 1);

    //no go "back" to the initial map to get the movies' pair
    Pairs pair = contenders.get(maxIndex);
    return new int[]{pair.getMovie1(), pair.getMovie2()};
  }

  //"Inspiration" for this function was taken from the internet ^^
  public static HashMap<Integer, Integer> sortByValue(HashMap<Integer, Integer> hashMap) {
    return hashMap.entrySet()
      .stream().sorted(Map.Entry.comparingByValue()).collect(
        Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1,
          LinkedHashMap::new));
  }
}
